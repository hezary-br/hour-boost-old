generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id_user                           String                             @id
  createdAt                         DateTime
  email                             String                             @unique
  username                          String                             @unique
  profilePic                        String
  plan                              Plan?                              @relation("user_plan")
  planOnceHad                       Plan[]                             @relation("plan_once_user_had")
  custom_plan                       CustomPlan?                        @relation("custom_user_plan")
  role                              Role
  status                            Status
  steamAccounts                     SteamAccount[]                     @relation("user_steam_accounts")
  preapprovals                      Preapproval[]                      @relation("user_preapprovals")
  subscriptions                     SubscriptionStripe[]               @relation("user_subscriptions")
  purchases                         Purchase[]                         @relation("user_purchases")
  usages                            Usage[]                            @relation("user_usages")
  subscriptionApprovedNotifications SubscriptionApprovedNotification[] @relation("user_subscription_approved_notification")

  @@map("users")
}

model Preapproval {
  id_preapproval        String   @id
  createdAt             DateTime
  user_id               String?
  user                  User?    @relation("user_preapprovals", fields: [user_id], references: [id_user], onDelete: Cascade)
  planName              String
  status                String
  previousPreapprovalId String?
  payerId               Int?
  isCurrent             Boolean?

  @@map("preapprovals")
}

model SubscriptionStripe {
  id_subscription String   @id
  createdAt       DateTime
  updatedAt       DateTime
  user_email      String?  @unique
  user            User?    @relation("user_subscriptions", fields: [user_email], references: [email], onDelete: Cascade)

  stripeCustomerId String?
  stripeStatus     String?
  stripePriceId    String?

  @@map("subscriptions")
}

model SubscriptionApprovedNotification {
  id_subscription String   @id
  createdAt       DateTime
  updatedAt       DateTime

  user_id String?
  user    User?   @relation("user_subscription_approved_notification", fields: [user_id], references: [id_user], onDelete: Cascade)

  planName String?

  @@map("subscription_approved_notification")
}

model SteamAccount {
  id_steamAccount       String   @id
  createdAt             DateTime
  owner_id              String?
  owner                 User?    @relation("user_steam_accounts", fields: [owner_id], references: [id_user], onDelete: Cascade)
  accountName           String   @unique
  password              String
  usage                 Usage[]  @relation("steam_account_usages")
  autoRelogin           Boolean  @default(false)
  isRequiringSteamGuard Boolean  @default(false)

  @@index([owner_id])
  @@map("steam_accounts")
}

model Plan {
  id_plan        String          @id
  createdAt      DateTime
  name           PlanName
  usages         Usage[]         @relation("plan_usages")
  owner          User?           @relation("user_plan", fields: [ownerId], references: [id_user], onDelete: Cascade)
  ownerId        String?         @unique
  belongedTo     User?           @relation("plan_once_user_had", fields: [onceBelongedTo], references: [id_user], onDelete: Cascade)
  onceBelongedTo String?
  type           PlanType        @default(USAGE)
  customPlan     CustomPlan_NEW? @relation("custom_plan_new")

  @@map("plans")
}

model CustomPlan {
  id_plan          String         @id
  createdAt        DateTime
  name             PlanNameCustom
  usages           Usage[]        @relation("custom_plan_usages")
  owner            User?          @relation("custom_user_plan", fields: [ownerId], references: [id_user], onDelete: Cascade)
  ownerId          String?        @unique
  type             PlanType       @default(USAGE)
  maxSteamAccounts Int
  maxGamesAllowed  Int
  maxUsageTime     Int
  priceInCents     Int
  autoRelogin      Boolean        @default(false)

  @@index([ownerId])
  @@map("custom_plans")
}

model CustomPlan_NEW {
  id_plan          String   @id
  createdAt        DateTime
  originalPlanId   String   @unique
  originalPlan     Plan?    @relation("custom_plan_new", fields: [originalPlanId], references: [id_plan], onDelete: Cascade)
  maxSteamAccounts Int
  maxGamesAllowed  Int
  maxUsageTime     Int
  priceInCents     Int
  autoRelogin      Boolean  @default(false)

  @@index([originalPlanId])
  @@map("custom_plans_new")
}

model Usage {
  id_usage       String       @id
  createdAt      DateTime
  amountTime     Int
  plan           Plan?        @relation("plan_usages", fields: [plan_id], references: [id_plan], onDelete: Cascade)
  plan_id        String?
  custom_plan    CustomPlan?  @relation("custom_plan_usages", fields: [custom_plan_id], references: [id_plan], onDelete: Cascade)
  custom_plan_id String?
  user           User         @relation("user_usages", fields: [user_id], references: [id_user], onDelete: Cascade)
  user_id        String
  accountName    String       @default("undefined")
  SteamAccount   SteamAccount @relation("steam_account_usages", fields: [accountName], references: [accountName])

  @@index([custom_plan_id])
  @@index([plan_id])
  @@index([user_id])
  @@index([accountName])
  @@map("usages")
}

model Purchase {
  id_Purchase String   @id
  owner_id    String   @unique
  owner       User     @relation("user_purchases", fields: [owner_id], references: [id_user], onDelete: Cascade)
  createdAt   DateTime

  @@map("purchases")
}

enum PlanType {
  INFINITY
  USAGE
}

enum PlanName {
  GUEST
  SILVER
  GOLD
  DIAMOND
}

enum PlanNameCustom {
  CUSTOM_USAGE_PLAN
  CUSTOM_INFINITY_PLAN
}

enum Status {
  ACTIVE
  BANNED
}

enum Role {
  ADMIN
  USER
}
